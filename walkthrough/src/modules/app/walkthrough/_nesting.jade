section
  :markdown
    # Nesting Modules inside of Modules

    So far, we have mostly focused on understanding the building blocks
    that are made available to us by the FSG. Module Elements
    are the primary building blocks of Modules. Modules are how
    we encapsulate reusable parcels of styling. Modifiers are what we
    use to create variations of existing styles. State classes
    are like global variables that we can use with JavaScript to trigger
    interactive style changes.

    The way these building blocks fit together logically in our markup is primarily
    via the creation of a nested tree of Modules. **To facilitate *maximum* code modularity
    and maintainability, our Module nesting structure should adhere to
    the following 2 guidelines**:

    1. **The top-level `.Module` and `.Module--modifier` classes should not have values set for
      the `width`, `top`, `bottom`, `left`, `right`, `margin`, and `float` properties**.
      (The CSS default value is `0` for `margin`, `none` for `float`, and `auto` for the rest.)
      Instead, **a Module should be positioned and sized by it's parent module, or by Utility classes.**
      For example,

      ``` html
      <div class="Hero">
          <div class="Hero-searchBar">
              <div class="SearchBar">...</div>
          </div>
      </div>
      ```

      If we feel that we must break this rule, then we should do so with Modifiers
      named in such a way that makes such exceptions easy to identifity from within the markup,
      for example:

      ``` html
      <div class="SearchBar SearchBar--w180px">...</div>
      ```

      ``` css
      .SearchBar--w180px {
          width: 180px;
      }
      ```

    2. A DOM element should never contain classes from different Modules. In other words,
      **Modules should not share boundaries.** For example:

      ``` html
      <div class="Hero">
          <div class="Hero-searchBar">
              <div class="SearchBar">...</div>
          </div>
      </div>
      ```

      is preferred over:

      ``` html
      <div class="Hero">
          <div class="Hero-searchBar SearchBar">...</div>
      </div>
      ```

      > **Note** that the preferred (first) approach is also necessary to fascilitate
      loading multiple CSS files asynchronously

    ## Nesting Modules: The Big Picture

    Let's take a step back and look at what the nesting structure should look like
    in a complete web page:

    ``` html
    <body>
      <div class="App">

        <header class="Header">...</header>

        <div class="Hero">
          <div class="Hero-middleRight">
            <div class="SearchBar">...</div>
          </div>
        </div>

        <section class="ArticleList">
          <div class="ArticleList-article">
            <article class="Article">...</article>
          </div>
        </section>

        <footer class="Footer">...</footer>

      </div>
    </body>
    ```

    Clearly, the styling in this page is the result of combining the CSS Modules
    `App`, `Header`, `Hero`, `SearchBar`, `ArticleList`, `Article`, and `Footer`.
    Each of these Modules will have a corresponding and appropriately named file in the `modules/` folder.
    Because we are following the FSG, we can determine some information
    about the structural styling in this webpage just by looking at the markup:

    - `.Header`, `.Hero`, `.ArticleList`, and `.Footer` are probably block-level
      elements that take up the full width of the page (because a block-level element
      will by default fill its parent container).

    - The `.Hero-middleRight` element is used to size and/or position the nested `.SearchBar`
      Module to the right, middle-aligned vertically.

    - The `.ArticleList-article` Element is used to size and/or position the nested `.Article`
      Module.

    One of the most important take-aways from the example above is that **a parent
    Module is responsible for positioning and sizing it's nested children**.
    Conversely, a Module should *not* position and size *itself*.

questions.Questions--2
  question
    h5 What are preferred ways to set width of <code>.SearchWidget</code>?
    answer-toggle-group
      answer-toggle(correct="false")
        :markdown
          ```
          <div class="SideBar">
            <div class="SearchWidget SearchWidget--250px">...</div>
          </div>
          ```
      answer-toggle(correct="true")
        :markdown
          ```
          <div class="SideBar">
            <div class="SideBar-searchWidget">
              <div class="SearchWidget">...</div>
            </div>
          </div>
          ```
      answer-toggle(correct="true")
        :markdown
          ```
          <div class="SideBar">
            <div class="SideBar-halfWidth">
              <div class="SearchWidget">...</div>
            </div>
          </div>
          ```
  question
    h5 Which are preferred <em>or</em> acceptable ways to set width of <code>.SearchWidget</code>?
    answer-toggle-group
      answer-toggle(correct="true")
        :markdown
          ```
          .SearchWidget--250px {
            width: 250px;
          }

          ```
      answer-toggle(correct="false")
        :markdown
          ```
          .SearchWidget {
            width: 250px;
          }

          ```
      answer-toggle(correct="true")
        :markdown
          ```
          .SideBar-searchWidget {
            width: 250px;
          }
          ```
      answer-toggle(correct="false")
        :markdown
          ```
          .SideBar .SearchWidget {
            width: 250px;
          }
          ```